// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  name     String
  password String
  image    String?
  phone    String?
  gender   gender?
  address  String?
  role     Role?   @default(USER)

  cartItem Cart[]
  orders   Order[]
  messages Message[]
  rooms Room[] @relation("RoomUsers")
}

model Room {
  id        Int       @id @default(autoincrement())
  messages  Message[]

  users     User[]    @relation("RoomUsers")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  senderId  Int      
  roomId    Int      

  sender    User     @relation(fields: [senderId], references: [id])
  room      Room     @relation(fields: [roomId], references: [id])

  createdAt DateTime @default(now())
}

enum gender {
  MALE
  FEMALE
}

enum Role {
  USER
  ADMIN
}

model Category {
  id   Int    @id @default(autoincrement())
  name String

  product Product[]
}

model Product {
  id           Int     @id @default(autoincrement())
  image        String?
  product_name String
  product_desc String?
  price        String?
  stok         String?
  categoryId   Int

  category   Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cartItems  CartItem[]
  OrderItems OrderItems[]
}

model Cart {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  totalAmount Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  cartItems CartItem[]
}

model CartItem {
  id           Int @id @default(autoincrement())
  cartId       Int
  productId    Int
  quantity     Int @default(1)
  productPrice Int
  totalPrice   Int

  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Order {
  id          Int         @id @default(autoincrement())
  userId      Int
  status      OrderStatus @default(PENDING)
  totalAmount Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  OrderItems OrderItems[]
}

model OrderItems {
  id           Int @id @default(autoincrement())
  orderId      Int
  productId    Int
  quantity     Int @default(1)
  productPrice Int
  totalPrice   Int

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum OrderStatus {
  PENDING
  SUCCESS
  CANCEL
}
